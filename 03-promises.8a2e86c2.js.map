{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,QAAS,IACTC,cAAc,IAGhB,MAAMC,EAAM,CACVC,aAAcC,SAASC,cAAc,kBACrCC,YAAaF,SAASC,cAAc,iBACpCE,cAAeH,SAASC,cAAc,mBACtCG,YAAaJ,SAASC,cAAc,WAiBtC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,uBAAuBN,EAAW,QAAQC,OAElDM,EAAO,IAAIE,MAAM,sBAAsBT,EAAW,QAAQC,OAAS,GAEpEA,EAAA,GAEP,CA1BAT,EAAIM,YAAYY,iBAAiB,SAEjC,SAA8BC,GAC5BA,EAAEC,kBAoCJ,SAA4BC,GAC1BA,EAAaC,SAAQC,IACnBA,EACGC,MAAKC,GAAS9B,EAAAF,GAASG,OAAO8B,QAAQD,KACtCE,OAAMC,GAASjC,EAAAF,GAASG,OAAOiC,QAAQD,EAAME,UAAO,GAE3D,CAlCEC,CAiBF,SAA4BC,EAAQvB,EAAOwB,GACzC,MAAMZ,EAAe,GAErB,IAAK,IAAIa,EAAI,EAAGA,EAAIF,EAAQE,IAC1Bb,EAAac,KAAK5B,EAAc2B,EAAGzB,IACnCA,GAASwB,EAGX,OAAOZ,CACT,CAhCuBe,CACnBC,OAAOrC,EAAIK,cAAcoB,OACzBY,OAAOrC,EAAIC,aAAawB,OACxBY,OAAOrC,EAAII,YAAYqB,QAI3B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  timeout: 4000,\n  clickToClose: true,\n});\n\nconst rfs = {\n  inputDelayEl: document.querySelector('[name=\"delay\"]'),\n  inputStepEl: document.querySelector('[name=\"step\"]'),\n  inputAmountEl: document.querySelector('[name=\"amount\"]'),\n  btnSubmitEl: document.querySelector('button'),\n};\n\nrfs.btnSubmitEl.addEventListener('click', onSubmitClickHandler);\n\nfunction onSubmitClickHandler(e) {\n  e.preventDefault();\n\n  const promiseArray = createPromiseArray(\n    Number(rfs.inputAmountEl.value),\n    Number(rfs.inputDelayEl.value),\n    Number(rfs.inputStepEl.value)\n  );\n\n  handlePromiseArray(promiseArray);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position + 1} in ${delay}ms`);\n      } else {\n        reject(new Error(`❌ Rejected promise ${position + 1} in ${delay}ms`));\n      }\n    }, delay);\n  });\n}\n\nfunction createPromiseArray(amount, delay, step) {\n  const promiseArray = [];\n\n  for (let i = 0; i < amount; i++) {\n    promiseArray.push(createPromise(i, delay));\n    delay += step;\n  }\n\n  return promiseArray;\n}\n\nfunction handlePromiseArray(promiseArray) {\n  promiseArray.forEach(promise => {\n    promise\n      .then(value => Notiflix.Notify.success(value))\n      .catch(error => Notiflix.Notify.failure(error.message));\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","timeout","clickToClose","$47d4ff9957288465$var$rfs","inputDelayEl","document","querySelector","inputStepEl","inputAmountEl","btnSubmitEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Error","addEventListener","e","preventDefault","promiseArray","forEach","promise","then","value","success","catch","error","failure","message","$47d4ff9957288465$var$handlePromiseArray","amount","step","i","push","$47d4ff9957288465$var$createPromiseArray","Number"],"version":3,"file":"03-promises.8a2e86c2.js.map"}